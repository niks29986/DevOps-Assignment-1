parameters:
- name: artifactName
  type: string
- name: imageName
  type: string
- name: containerRegistry
  type: string
- name: imageTag
  type: string

steps:

- task: Maven@3
  inputs:
    mavenPomFile: '$(System.DefaultWorkingDirectory)/pom.xml'
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '11'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/reports/TEST-*.xml'
    goals: 'package'

- task: CopyFiles@2
  displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
  inputs:
    SourceFolder: '$(system.defaultworkingdirectory)'
    Contents: '**/*.jar'
    TargetFolder: '$(build.artifactstagingdirectory)'
  condition: succeededOrFailed()

- task: CopyFiles@2
  displayName: Copy source files to drop location
  inputs:
    TargetFolder: '$(Build.ArtifactStagingDirectory)/${{ parameters.artifactName }}/'
    Contents: |
      pipeline/storage/**
      !**/.gitkeep
      !.git/**/*

- task: PublishBuildArtifacts@1
  displayName: Publish build artifact
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/${{ parameters.artifactName }}'
    ArtifactName: '${{ parameters.artifactName }}'

- task: Docker@2
  displayName: Login to ACR
  inputs:
    command: login
    containerRegistry: ${{ parameters.containerRegistry }}

- task: Docker@2
  displayName: Build container image
  inputs:
    command: build
    Dockerfile: Dockerfile
    addPipelineData: false
    repository: ${{ parameters.imageName }}
    tags: ${{ parameters.imageTag }}
    arguments: >
      --build-arg "BUILD_ID=$(Build.BuildId)"

- task: Docker@2
  displayName: Push container image to container registry
  inputs:
    repository: ${{ parameters.imageName }}
    command: push
    addPipelineData: false
    tags: ${{ parameters.imageTag }}